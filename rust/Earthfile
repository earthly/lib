VERSION --global-cache 0.7

# INIT stores the configuration required for the other functions in the filesystem, and installs required dependencies.
#   - cache_id: Overrides default ID of the global $CARGO_HOME cache. Its value is exported to the build environment under the entry: $EARTHLY_CARGO_HOME_CACHE_ID
#   - keep_fingerprints (false): Instructs the following +CARGO calls to don't remove the Cargo fingerprints of the source packages. Use only when source packages have been COPYed with --keep-ts option.
#   - sweep_days (4): +CARGO uses cargo-sweep to clean build artifacts that haven't been accessed for this number of days.
INIT:
    COMMAND
    RUN if [ -n "$EARTHLY_CARGO_HOME_CACHE_ID" ]; then \
      echo "+INIT has already been called in this build environment" ; \
      exit 1; \
    fi
    IF [ "$CARGO_HOME" = "" ]
        ENV CARGO_HOME="$HOME/.cargo"
    END
    IF ! echo $PATH | grep -E -q "(^|:)$CARGO_HOME/bin($|:)"
        ENV PATH="$PATH:$CARGO_HOME/bin"
    END
    DO +INSTALL_CARGO_SWEEP
    RUN mkdir -p /tmp/earthly/cfg

    # EARTHLY_CARGO_HOME_CACHE_ID
    ARG EARTHLY_TARGET_PROJECT_NO_TAG
    ARG OS_RELEASE=$(md5sum /etc/os-release | cut -d ' ' -f 1)
    ENV EARTHLY_CARGO_HOME_CACHE_ID="${EARTHLY_TARGET_PROJECT_NO_TAG}#${OS_RELEASE}#earthly-cargo-cache"

    # $EARTHLY_KEEP_FINGERPRINTS
    ARG keep_fingerprints=false
    ENV EARTHLY_KEEP_FINGERPRINTS=$keep_fingerprints

    # $EARTHLY_SWEEP_DAYS
    ARG sweep_days=4
    ENV EARTHLY_SWEEP_DAYS=$sweep_days

# CARGO runs the cargo command "cargo $args".
# This function is thread safe. Parallel builds of targets calling this function should be free of race conditions.
# Notice that in order to run this function, +INIT must be called first.
# Arguments:
#   - args: Cargo subcommand and its arguments. Required.
#   - output: Regex matching output artifacts files to be copied to ./target folder in the caller filesystem (image layers).
#     Use this argument when you want to SAVE an ARTIFACT from the target folder (mounted cache), always trying to minimize the total size of the copied fileset.
#     For example --output="release/[^\./]+" would keep all the files in /target/release that don't have any extension.
CARGO:
    COMMAND
    DO +CHECK_INITED
    ARG --required args
    ARG output
    ARG TMP_FOLDER="/tmp/earthly/lib/rust"
    IF [ "$EARTHLY_KEEP_FINGERPRINTS" = "false" ]
       DO +REMOVE_SOURCE_FINGERPRINTS
    END
    DO +RUN_WITH_CACHE --command="set -e;
        echo \"Running cargo $args\" ;
        cargo $args;
        if [ -n \"$output\" ]; then
          echo \"Copying output files\" ;
          mkdir -p $TMP_FOLDER;
          cd target;
          find . -type f -regextype posix-egrep -regex \"./$output\" -exec cp --parents \{\} $TMP_FOLDER \; ;
          cd ..;
        fi;
        echo \"Running cargo sweep -r -t $EARTHLY_SWEEP_DAYS\" ;
        cargo sweep -r -t $EARTHLY_SWEEP_DAYS;
        echo \"Running cargo sweep -r -i\" ;
        cargo sweep -r -i;"
    IF [ "$output" != "" ]
      RUN mkdir -p target; \
          mv $TMP_FOLDER/* target 2>/dev/null || echo "no files found within ./target matching the provided output regexp" ;
    END

# RUN_WITH_CACHE runs the passed command with the CARGO caches mounted.
# Notice that in order to run this function, +INIT must be called first. This function exports the target cache mount ID under the env entry: $TARGET_CACHE_ID.
# Arguments:
#   - command (required): Command to run, can be any expression.
#   - EARTHLY_CARGO_HOME_CACHE_ID: ID of the cargo home cache mount. By default: $EARTHLY_CARGO_HOME_CACHE_ID as exported by +INIT
#   - target_cache_id: ID of the target cache mount. By default: ${EARTHLY_CARGO_HOME_CACHE_ID}#${EARTHLY_TARGET_NAME}
#   - with_docker: Runs the command within a WITH DOCKER element parametrized with this value
#
RUN_WITH_CACHE:
    COMMAND
    DO +CHECK_INITED
    ARG --required command
    ARG EARTHLY_TARGET_NAME
    ARG EARTHLY_CARGO_HOME_CACHE_ID = $EARTHLY_CARGO_HOME_CACHE_ID
    ARG target_cache_id="${EARTHLY_CARGO_HOME_CACHE_ID}#${EARTHLY_TARGET_NAME}"
    ARG with_docker
    # Save to restore at the end.
    ARG ORIGINAL_CARGO_HOME=$CARGO_HOME
    ARG ORIGINAL_CARGO_INSTALL_ROOT=$CARGO_INSTALL_ROOT
    # Make sure that crates installed through this function are stored in the original cargo home, and not in the cargo home within the mount cache.
    # This way, if BK garbage-collects them, the build is not broken.
    ENV CARGO_INSTALL_ROOT=$ORIGINAL_CARGO_HOME
    # We change $CARGO_HOME while keeping $ORIGINAL_CARGO_HOME/bin directory in the path. This way, the Cargo binary is still accessible and the whole $CARGO_HOME is within the global cache
    # ($CARGO_HOME/.package-cache has to be in the cache so Cargo can properly synchronize parallel access to $CARGO_HOME resources).
    ENV CARGO_HOME="/tmp/earthly/.cargo"
    IF [ -n "$with_docker" ]
      WITH DOCKER $with_docker
        RUN --mount=type=cache,mode=0777,id=$EARTHLY_CARGO_HOME_CACHE_ID,sharing=shared,target=$CARGO_HOME \
            --mount=type=cache,mode=0777,id=$target_cache_id,sharing=locked,target=target \
            set -e; \
            mkdir -p $CARGO_HOME; \
            printf "Running:\n      $command\n"; \
            eval $command
      END
    ELSE
      RUN --mount=type=cache,mode=0777,id=$EARTHLY_CARGO_HOME_CACHE_ID,sharing=shared,target=$CARGO_HOME \
        --mount=type=cache,mode=0777,id=$target_cache_id,sharing=locked,target=target \
        set -e; \
        mkdir -p $CARGO_HOME; \
        printf "Running:\n      $command\n"; \
        eval $command
    END
    ENV CARGO_HOME=$ORIGINAL_CARGO_HOME
    ENV CARGO_INSTALL_ROOT=$ORIGINAL_CARGO_INSTALL_ROOT
    ENV TARGET_CACHE_ID=$target_cache_id

get-tomljson:
    FROM alpine:3.18.3
    ARG USERARCH
    ARG version=2.1.0
    RUN wget -O tomljson.tar.xz https://github.com/pelletier/go-toml/releases/download/v${version}/tomljson_${version}_linux_${USERARCH}.tar.xz && \
        tar -xf tomljson.tar.xz; \
        chmod +x tomljson
    SAVE ARTIFACT tomljson

get-jq:
    FROM alpine:3.18.3
    ARG USERARCH
    ARG version=1.7
    RUN wget -O jq https://github.com/jqlang/jq/releases/download/jq-${version}/jq-linux-${USERARCH} && \
        chmod +x jq
    SAVE ARTIFACT jq

INSTALL_CARGO_SWEEP:
    COMMAND
    RUN if [ ! -f $CARGO_HOME/bin/cargo-sweep ]; then \
          echo "Installing cargo sweep" ; \
          cargo install cargo-sweep --root $CARGO_HOME; \
        fi;

REMOVE_SOURCE_FINGERPRINTS:
    COMMAND
    DO +CHECK_INITED
    COPY +get-tomljson/tomljson /tmp/tomljson
    COPY +get-jq/jq /tmp/jq
    DO +RUN_WITH_CACHE --command="set -e;
        source_libs=\$(find . -name Cargo.toml -exec bash -c '/tmp/tomljson {} | /tmp/jq -r .package.name; printf \"\\n\"' \\;) ;
        fingerprint_folders=\$(find target -name .fingerprint) ;
        echo \"deleting fingerprints:\";
        for fingerprint_folder in \$fingerprint_folders; do
          cd \$fingerprint_folder;
          for source_lib in \$source_libs; do
            find . -maxdepth 1 -regex \"\./\$source_lib-[^-]+\" -exec bash -c 'readlink -f {}; rm -rf {}' \; ;
          done
        done"

CHECK_INITED:
    COMMAND
    RUN  if [ ! -n "$EARTHLY_CARGO_HOME_CACHE_ID" ]; then \
          echo "+INIT has not been called yet in this build environment" ; \
          exit 1; \
        fi;
